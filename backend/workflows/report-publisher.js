// Pipedream Workflow: Report-Publisher
// Combines: PDF Generation + Email Sending + Tracking
// Trigger: HTTP API (from Orchestrator or direct tracking)
// Environment Variables Needed:
//   RESEND_API_KEY, R2_ACCOUNT_ID, R2_ACCESS_KEY_ID, R2_BUCKET_NAME, GHL_WEBHOOK_URL

import puppeteer from '@pipedream/puppeteer';
import { Resend } from 'resend';

export default defineComponent({
  async run({ steps, $ }) {
    const { body } = steps.trigger.event;
    
    // ===== STEP 1: ROUTE REQUEST BASED ON ACTION TYPE =====
    if (body.action === 'generate_pdf_and_email') {
      return await handlePdfAndEmail(body.contactId, body.reportData);
    } else if (body.action === 'track_click') {
      return await handleTracking(body.trackingData);
    } else {
      return {
        statusCode: 400,
        body: { error: 'Unknown action type' }
      };
    }
  },
})

// ===== PDF & EMAIL HANDLER =====

/**
 * Handle PDF generation and email sending
 */
async function handlePdfAndEmail(contactId, reportData) {
  try {
    // ===== STEP 2: GENERATE PDF WITH PUPPETEER =====
    const pdfBuffer = await generatePDF(reportData);
    
    // ===== STEP 3: SAVE PDF TO R2 =====
    await saveToR2(
      `reports/${contactId}/report.pdf`,
      pdfBuffer,
      'application/pdf'
    );

    // ===== STEP 4: SEND EMAIL VIA RESEND =====
    const emailResult = await sendEmail(contactId, reportData);
    
    // ===== STEP 5: SEND TAGS TO GHL =====
    await sendTagsToGHL(contactId, [
      ...reportData.generatedTags, 
      'Submitted_AI_Report',
      'Downloaded_PDF_AI_Report'
    ]);

    return {
      statusCode: 200,
      body: {
        status: 'publish_complete',
        emailId: emailResult.emailId,
        reportId: contactId
      }
    };

  } catch (error) {
    console.error('PDF and email error:', error);
    throw error;
  }
}

/**
 * Generate PDF using Puppeteer
 */
async function generatePDF(reportData) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();

  try {
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <style>
          body { 
            font-family: 'Inter', 'Helvetica', 'Arial', sans-serif; 
            line-height: 1.6; 
            color: #333; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 40px 20px;
            font-size: 14px;
          }
          .header { 
            text-align: center; 
            border-bottom: 3px solid #10B981; 
            padding-bottom: 20px; 
            margin-bottom: 30px;
          }
          h1 { color: #065F46; font-size: 24px; margin-bottom: 10px; }
          h2 { color: #065F46; font-size: 20px; margin-top: 25px; margin-bottom: 15px; }
          h3 { color: #047857; font-size: 16px; margin-top: 20px; margin-bottom: 10px; }
          .section { margin-bottom: 20px; }
          .recommendation { 
            background: #F0FDF4; 
            padding: 12px; 
            border-left: 4px solid #10B981; 
            margin: 12px 0; 
          }
          .footer { 
            margin-top: 40px; 
            text-align: center; 
            font-size: 11px; 
            color: #6B7280; 
            border-top: 1px solid #E5E7EB; 
            padding-top: 15px;
          }
          ul { margin: 10px 0; padding-left: 20px; }
          li { margin-bottom: 5px; }
          p { margin-bottom: 12px; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Personalized AI Habit Blueprint</h1>
          <p>Generated on ${new Date(reportData.generatedAt).toLocaleDateString()}</p>
        </div>
        <div id="content">
          ${reportData.htmlContent}
        </div>
        <div class="footer">
          <p>Confidential Report for ${reportData.contactId} â€¢ Generated by Habit Mastery System</p>
          <p>Â© ${new Date().getFullYear()} Habit Mastery System. All rights reserved.</p>
        </div>
      </body>
      </html>
    `;

    await page.setContent(htmlContent, { waitUntil: 'networkidle0' });
    
    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: { top: '1cm', right: '1cm', bottom: '1cm', left: '1cm' }
    });

    return pdfBuffer;

  } finally {
    await browser.close();
  }
}

/**
 * Send email with report links via Resend
 */
async function sendEmail(contactId, reportData) {
  const resend = new Resend(process.env.RESEND_API_KEY);

  const emailData = {
    from: 'Habit Mastery System <reports@mail.habitmasterysystem.com>',
    to: reportData.formData.email || `contact-${contactId}@habitmasterysystem.com`,
    subject: `ðŸŽ¯ Your Personalized AI Habit Blueprint is Ready!`,
    html: generateEmailHTML(contactId, reportData)
  };

  const result = await resend.emails.send(emailData);
  return { emailId: result.id };
}

/**
 * Generate email HTML template
 */
function generateEmailHTML(contactId, reportData) {
  const reportUrl = `https://ai.habitmasterysystem.com/report/${contactId}`;
  const pdfUrl = `https://pub-5fd9b7e823f34897ac9194436fa60593.r2.dev/reports/${contactId}/report.pdf`;

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: 'Inter', sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
        .container { max-width: 600px; margin: 0 auto; padding: 0; }
        .header { background: linear-gradient(135deg, #10B981, #059669); color: white; padding: 40px 30px; text-align: center; }
        .content { background: #f8fafc; padding: 40px 30px; }
        .cta-button { background: #10B981; color: white; padding: 16px 32px; text-decoration: none; border-radius: 8px; display: inline-block; margin: 10px 5px; font-weight: 600; }
        .secondary-button { background: white; color: #10B981; border: 2px solid #10B981; padding: 16px 32px; text-decoration: none; border-radius: 8px; display: inline-block; margin: 10px 5px; font-weight: 600; }
        .feature-list { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1 style="margin: 0; font-size: 28px;">ðŸŽ¯ Your AI Habit Blueprint is Ready!</h1>
          <p style="margin: 10px 0 0 0; font-size: 16px; opacity: 0.9;">Personalized analysis based on your unique goals</p>
        </div>
        <div class="content">
          <h2 style="margin-top: 0;">Congratulations!</h2>
          <p>Your <strong>Personalized AI Habit Blueprintâ„¢</strong> has been completed and is ready for review.</p>
          
          <div class="feature-list">
            <p><strong>What's inside your blueprint:</strong></p>
            <ul>
              <li>Your unique Habit Archetype identification</li>
              <li>Custom 30-Day Implementation Roadmap</li>
              <li>Strategic template recommendations</li>
              <li>Advanced tracking systems and success metrics</li>
            </ul>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${reportUrl}" class="cta-button">ðŸ‘€ View Your Interactive Blueprint</a>
            <br>
            <a href="${pdfUrl}" class="secondary-button">ðŸ“¥ Download PDF Version</a>
          </div>
          
          <p><strong>Pro Tip:</strong> Start with the 30-day implementation roadmap - it's your step-by-step guide to habit mastery.</p>
          
          <p>We're excited to see you achieve your goals!</p>
          
          <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #E5E7EB;">
            <p style="margin: 0;">To your success,<br><strong>The Habit Mastery System Team</strong></p>
          </div>
        </div>
      </div>
    </body>
    </html>
  `;
}

// ===== TRACKING HANDLER =====

/**
 * Handle click tracking from frontend
 */
async function handleTracking(trackingData) {
  const { reportId, linkType, timestamp } = trackingData;
  
  try {
    // Send tracking tag to GHL
    let actionTag;
    switch (linkType) {
      case 'vault':
        actionTag = 'Clicked_Vault_Link_AI_Report';
        break;
      case 'accountability':
        actionTag = 'Clicked_Accountability_Link_AI_Report';
        break;
      case 'sheets':
        actionTag = 'Clicked_Sheets_Mastery_Link_AI_Report';
        break;
      case 'pdf_download':
        actionTag = 'Downloaded_PDF_AI_Report';
        break;
      default:
        actionTag = 'Clicked_Link_AI_Report';
    }

    await sendTagsToGHL(reportId, [actionTag]);

    return {
      statusCode: 200,
      body: { success: true, tracked: actionTag }
    };

  } catch (error) {
    console.error('Tracking error:', error);
    return {
      statusCode: 200, // Don't fail the request
      body: { success: false, error: error.message }
    };
  }
}

// ===== SHARED UTILITIES =====

/**
 * Send tags to GoHighLevel via webhook
 */
async function sendTagsToGHL(contactId, tags) {
  try {
    const response = await fetch(process.env.GHL_WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.GHL_API_KEY}`
      },
      body: JSON.stringify({
        contactId,
        tags: tags.map(tag => ({ tag }))
      })
    });
    
    if (!response.ok) {
      console.warn('Failed to send tags to GHL:', await response.text());
    }
  } catch (error) {
    console.error('Error sending tags to GHL:', error);
  }
}

/**
 * Save file to Cloudflare R2
 */
async function saveToR2(filePath, content, contentType) {
  const url = `https://${process.env.R2_ACCOUNT_ID}.r2.cloudflarestorage.com/${process.env.R2_BUCKET_NAME}/${filePath}`;
  
  const response = await fetch(url, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${process.env.R2_ACCESS_KEY_ID}`,
      'Content-Type': contentType,
    },
    body: content
  });

  if (!response.ok) {
    throw new Error(`R2 upload failed: ${response.statusText}`);
  }

  return { success: true, path: filePath };
}
